import maya.OpenMaya as OpenMaya
import pymel.core as pm
import maya.OpenMayaAnim as OpenMayaAnim
import maya.cmds as cmds
import maya.mel as mel


class CheckMaxSkinInfluences:
    ''' This script takes a mesh with a skinCluster and checks it for N skin weights.
    If it has more than N, it selects the verts, so you can edit them.
    The script automatically prunes tiny values, because if you paint away an influence,
    it won't always zero out the values properly.
    Usage: select the number of influences your engine supports and a tiny prune value.
    Select the mesh and run the script.

    Based on the script by Tyler Thornock from http://www.charactersetup.com/tutorial_skinWeights.html
    Modified for use by Chris Lesage
    '''

    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)
        self.name = 'checkMaxSkinInfluences'
        self.title = 'Check Max Skin Influences'
        self.version = 0.8
        self.author = 'Chris Lesage'

        self.maxInfluences = 4
        self.pruneValue = 0.001
        self.btn1 = None
        self.btn2 = None

        self.ui()

    def ui(self):
        if pm.window(self.name, q=1, exists=1):
            pm.deleteUI(self.name)

        with pm.window(self.name, title=f"{self.title} v{self.version}", width=200, menuBar=True) as win:
            with pm.rowLayout(nc=4):
                pm.text(label='Max Influences: ', font='boldLabelFont', align='center')
                self.btn1 = pm.intField(width=40, value=self.maxInfluences, changeCommand=pm.Callback(self.max_inf_value_change))
                pm.text(label='Auto Prune: ', font='boldLabelFont', align='center')
                self.btn2 = pm.floatField(width=40 * 3, value=self.pruneValue, changeCommand=pm.Callback(self.prune_value_change))
            with pm.horizontalLayout() as layout:
                pm.button(width=290, label='Check Max Influences', command=pm.Callback(self.do_the_thing))
            layout.redistribute()
        pm.showWindow()

    def prune_value_change(self, value):
        self.pruneValue = value

    def max_inf_value_change(self, value):
        self.maxInfluences = value

    def check_influences(self, mesh, maxInfluences, pruneValue):
        skinCluster = None
        for node in pm.listHistory(mesh):
            if isinstance(node, pm.nodetypes.SkinCluster):
                skinCluster = node
                break

        if not skinCluster:
            pm.warning(f"No skinCluster found on {mesh}")
            return

        pm.skinPercent(skinCluster, mesh, pruneWeights=pruneValue)

        selList = OpenMaya.MSelectionList()
        selList.add(skinCluster.name())
        clusterNode = OpenMaya.MObject()
        selList.getDependNode(0, clusterNode)
        skinFn = OpenMayaAnim.MFnSkinCluster(clusterNode)

        infDags = OpenMaya.MDagPathArray()
        skinFn.influenceObjects(infDags)

        infIds = {}
        infs = []
        for x in range(infDags.length()):
            infPath = infDags[x].fullPathName()
            infId = int(skinFn.indexForInfluenceObject(infDags[x]))
            infIds[infId] = x
            infs.append(infPath)

        wlPlug = skinFn.findPlug('weightList')
        wPlug = skinFn.findPlug('weights')
        wlAttr = wlPlug.attribute()
        wAttr = wPlug.attribute()
        wInfIds = OpenMaya.MIntArray()

        weights = {}
        for vId in range(wlPlug.numElements()):
            vWeights = {}
            wPlug.selectAncestorLogicalIndex(vId, wlAttr)
            wPlug.getExistingArrayAttributeIndices(wInfIds)
            infPlug = OpenMaya.MPlug(wPlug)
            for infId in wInfIds:
                infPlug.selectAncestorLogicalIndex(infId, wAttr)
                try:
                    vWeights[infIds[infId]] = infPlug.asDouble()
                except KeyError:
                    pass
            weights[vId] = vWeights

        overWeighted = [x for x in weights.keys() if len(weights[x]) > maxInfluences]
        [pm.select(mesh.vtx[x], add=True) for x in overWeighted]
        if overWeighted:
            pm.selectMode(component=True)
            pm.warning(f"{mesh} has {len(overWeighted)} overloaded ({maxInfluences}) influences.")
        else:
            pm.select(mesh.vtx, d=True)
            print(f"{mesh} is properly pruned to max {maxInfluences}.")

    def do_the_thing(self):
        self.maxInfluences = self.btn1.getValue()
        self.pruneValue = self.btn2.getValue()

        pm.selectMode(object=True)
        for node in pm.selected(type='transform'):
            pm.selectMode(component=True)
            pm.select(node.vtx, d=True)
        pm.selectMode(object=True)
        for node in pm.selected(type='transform'):
            self.check_influences(node, self.maxInfluences, self.pruneValue)


CheckMaxSkinInfluences()
