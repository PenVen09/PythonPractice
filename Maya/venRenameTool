from PySide2 import QtWidgets, QtCore, QtGui
from shiboken2 import wrapInstance
import maya.OpenMayaUI as omui

class RenameToolUI(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(RenameToolUI, self).__init__(parent)
        self.setWindowTitle("Ven Rename Tool")
        self.setFixedSize(420, 600)
        
        self.templateName = "prefix|baseName|suffix"
        templateParts = self.templateName.split("|")
        self.previewText =  "_".join(templateParts)

        self.buildUI()
        self.show()
        self.sideUpdateRename()
        

        
    def buildUI(self):
        mainLayout = QtWidgets.QVBoxLayout()

        label = QtWidgets.QLabel("------------------------ Selection Options ----------------------------")
        label.setAlignment(QtCore.Qt.AlignCenter)
        mainLayout.addWidget(label)
        selection_group = QtWidgets.QGroupBox("Selection:")
        sel_layout = QtWidgets.QHBoxLayout()
        self.selectRadioGrp = QtWidgets.QButtonGroup(self)
        
        for i, text in enumerate(["Selected", "Hierarchy", "All"]):
            rb = QtWidgets.QRadioButton(text)
            sel_layout.addWidget(rb)
            self.selectRadioGrp.addButton(rb, i)
            
        self.selectRadioGrp.buttons()[0].setChecked(True)
        selection_group.setLayout(sel_layout)
        mainLayout.addWidget(selection_group)
        
        mainLayout.addWidget(self._separator())
        label = QtWidgets.QLabel("------------------------ Side Options ----------------------------")
        label.setAlignment(QtCore.Qt.AlignCenter)
        mainLayout.addWidget(label)

        self.sideCheck = QtWidgets.QCheckBox("Enable Side")
        self.sideCheck.setChecked(False)

        mainLayout.addWidget(self.sideCheck)


        side_group = QtWidgets.QGroupBox("Side:")
        side_layout = QtWidgets.QHBoxLayout()
        self.sideRadioGrp = QtWidgets.QButtonGroup(self)
        
        for i, text in enumerate([ "L", "R", "C"]):
            rb = QtWidgets.QRadioButton(text)
            side_layout.addWidget(rb)
            self.sideRadioGrp.addButton(rb, i)
        self.sideRadioGrp.buttons()[0].setChecked(True)
        self.sideRadioGrp.buttonClicked.connect(self.sideUpdateRename)

        side_group.setLayout(side_layout)
        
        self.sideCheck.toggled.connect(lambda state: self._toggleRadio(self.sideRadioGrp, state))
        self._toggleRadio(self.sideRadioGrp, False)

        self.sideCheck.toggled.connect(self.sideUpdateRename)
        mainLayout.addWidget(side_group)

        pos_layout = QtWidgets.QHBoxLayout()
        pos_layout.addStretch()
        pos_label = QtWidgets.QLabel("Position:       ")
        self.sideSlider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.sideSlider.setRange(0, 5)
        self.sideSlider.setValue(2)
        self.sideSlider.setFixedWidth(300)
        self.sideSlider.setEnabled(False)
        self.sideCheck.toggled.connect(lambda state: self.sideSlider.setEnabled(state))
        
        
        pos_layout.addWidget(pos_label)
        pos_layout.addWidget(self.sideSlider)
        pos_layout.addStretch()
        self.sideSlider.valueChanged.connect(self.sideUpdateRename)
        mainLayout.addLayout(pos_layout)

        mainLayout.addWidget(self._separator())
        label = QtWidgets.QLabel("------------------------ Main ----------------------------")
        label.setAlignment(QtCore.Qt.AlignCenter)
        mainLayout.addWidget(label)
        prefixLayout, self.prefixField, self.prefixDropdown, self.prefixAddBtn = self._textField_and_dropdown("Prefixes:", 120, "prefixesNameField", ["RIG", "SM", "GEO", "CAM"], "enter prefixes")
        self.prefixDropdown.currentIndexChanged.connect(
            lambda: self.updateFieldState(self.prefixDropdown, self.prefixField)
        )
        self.prefixDropdown.currentIndexChanged.connect(self.mainNaming)
        self.prefixField.textChanged.connect(self.mainNaming)
        self.prefixAddBtn.clicked.connect(lambda: self.addName("prefixes"))
        mainLayout.addLayout(prefixLayout)
         
        tmpLayout = QtWidgets.QHBoxLayout()
        baseLayout, self.baseField  = self._labeled_textfield("Base Name:", 120, "baseNameField", "base or search for")
        self.baseField.textChanged.connect(self.mainNaming)
        
        self.replaceCheck = QtWidgets.QCheckBox("R")
        
        self.replaceCheck.setChecked(False)
        self.replaceTextField = QtWidgets.QLineEdit()
        self.replaceTextField.setFixedWidth(120)
        self.replaceTextField.setPlaceholderText("Replace with")
        self.replaceTextField.setEnabled(False)
        self.replaceTextField.setStyleSheet("color: grey; background-color: #555555;")
        self.replaceBtn = QtWidgets.QPushButton("R")
        self.replaceBtn.setStyleSheet("color: grey; background-color: #555555;")
        self.replaceBtn.setEnabled(False)
        self.replaceBtn.clicked.connect(self.searchReplace)
        

        self.replaceCheck.toggled.connect(lambda state: self._toggle_Field(self.replaceTextField, state))
        self.replaceCheck.toggled.connect(lambda state: self._toggle_Field(self.replaceBtn, state))
        tmpLayout.addLayout(baseLayout)
        tmpLayout.addWidget(self.replaceCheck)
        tmpLayout.addWidget(self.replaceTextField)
        tmpLayout.addWidget(self.replaceBtn)
        tmpLayout.addStretch()
        mainLayout.addLayout(tmpLayout)
        
        
        suffixLayout, self.suffixField, self.suffixDropdown, self.suffixAddBtn = self._textField_and_dropdown("Suffixes:", 120, "suffixesNameField", ["JNT", "OFFSET", "CTRL", "GRP"], "enter suffixes")
        self.suffixAddBtn.clicked.connect(lambda: self.addName("suffixes"))
        self.suffixDropdown.currentIndexChanged.connect(self.mainNaming)
        self.suffixDropdown.currentIndexChanged.connect(
            lambda: self.updateFieldState(self.suffixDropdown, self.suffixField)
        )
        self.suffixField.textChanged.connect(self.mainNaming)
        mainLayout.addLayout(suffixLayout)
        
        
        mainLayout.addWidget(self._separator())
        label = QtWidgets.QLabel("------------------------ Numbering ----------------------------")
        label.setAlignment(QtCore.Qt.AlignCenter)
        mainLayout.addWidget(label)
        self.numberCheck = QtWidgets.QCheckBox("Enable Numbering")
        self.numberCheck.setChecked(False)
        mainLayout.addWidget(self.numberCheck)
        self.numberCheck.toggled.connect(self.sideUpdateRename)

        startNumLayout = QtWidgets.QHBoxLayout()
        startNumLabel = QtWidgets.QLabel("Start Number:")
        self.startNumField = QtWidgets.QSpinBox()
        self.startNumField.setMinimum(0)
        self.startNumField.setValue(1)
        self.startNumField.setEnabled(False)
        self.numberCheck.toggled.connect(lambda state: self.startNumField.setEnabled(state))
        
        
        startNumLayout.addWidget(startNumLabel)
        startNumLayout.addWidget(self.startNumField)

        numPadLabel = QtWidgets.QLabel("Number Padding:")
        self.numPadField = QtWidgets.QSpinBox()
        self.numPadField.setMinimum(1)
        self.numPadField.setValue(2)
        self.numPadField.setEnabled(False)
        self.numberCheck.toggled.connect(lambda state: self.numPadField.setEnabled(state))
        startNumLayout .addWidget(numPadLabel)
        startNumLayout.addWidget(self.numPadField)
        
        
        self.startNumField.valueChanged.connect(self.sideUpdateRename)
        self.numPadField.valueChanged.connect(self.sideUpdateRename)
        mainLayout.addLayout(startNumLayout)

        padpos_layout = QtWidgets.QHBoxLayout()
        padpos_layout.addStretch()
        padpos_label = QtWidgets.QLabel("Padding Pos:    ")
        self.paddingPosition = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.paddingPosition.setRange(0, 5)
        self.paddingPosition.setValue(2)
        self.paddingPosition.setEnabled(False)
        self.numberCheck.toggled.connect(lambda state: self.paddingPosition.setEnabled(state))
        
        
        self.paddingPosition.setFixedWidth(300)
        padpos_layout.addWidget(padpos_label)
        padpos_layout.addWidget(self.paddingPosition)
        padpos_layout.addStretch()
        self.paddingPosition.valueChanged.connect(self.sideUpdateRename)
        mainLayout.addLayout(padpos_layout)

        preview_layout = QtWidgets.QHBoxLayout()
        preview_label = QtWidgets.QLabel("Preview:")
        self.previewField = QtWidgets.QLineEdit()
        self.previewField.setReadOnly(True)
        self.previewField.setFixedWidth(300)
        self.previewField.setStyleSheet("background-color: #555555;")
        self.previewField.setText(self.previewText)
        preview_layout.addWidget(preview_label)
        preview_layout.addWidget(self.previewField)
        mainLayout.addLayout(preview_layout)

        mainLayout.addStretch()
        exeLayout = QtWidgets.QHBoxLayout()
        self.renameButton = QtWidgets.QPushButton("Rename")
        self.renameButton.clicked.connect(self.rename)
        self.resetButton = QtWidgets.QPushButton("Reset")
        self.resetButton.setStyleSheet("background-color: red; color: white;")
        self.resetButton.clicked.connect(self.reset)
        
        exeLayout.addWidget(self.renameButton)
        exeLayout.addWidget(self.resetButton)
        mainLayout.addLayout(exeLayout)
        
        miniLayout =  QtWidgets.QHBoxLayout()
        delButtonsLayout = QtWidgets.QHBoxLayout()
        label1 = QtWidgets.QLabel("Remove from")
        self.endNumField = QtWidgets.QSpinBox()
        self.endNumField.setMinimum(-100) 
        self.endNumField.setValue(-1)
        

        btnDel = QtWidgets.QPushButton()
        btnDel.setIcon(QtGui.QIcon(":delete.png"))
        btnDel.clicked.connect(self.removeEnd)
        delButtonsLayout.addWidget(label1)
        delButtonsLayout.addWidget(self.endNumField)
        delButtonsLayout.addWidget(btnDel)

        del02ButtonsLayout = QtWidgets.QHBoxLayout()
        label2 = QtWidgets.QLabel("Remove all numbers")
        btnDel02 = QtWidgets.QPushButton()
        btnDel02.setIcon(QtGui.QIcon(":delete.png"))
        del02ButtonsLayout.addWidget(label2)
        del02ButtonsLayout.addWidget(btnDel02)

        miniLayout.addLayout(delButtonsLayout)
        miniLayout.addLayout(del02ButtonsLayout)
        mainLayout.addLayout(miniLayout)
        
        
        autoexeLayout = QtWidgets.QHBoxLayout()
        self.autoSuffixesBtn = QtWidgets.QPushButton("Auto Suffixes")
        self.autoSuffixesBtn.clicked.connect(self.autoSuffixes)
        autoexeLayout.addWidget(self.autoSuffixesBtn)
        mainLayout.addLayout(autoexeLayout)

        central_widget = QtWidgets.QWidget()
        central_widget.setLayout(mainLayout)
        self.setCentralWidget(central_widget)
        

    def _labeled_textfield(self, label_text, width, object_name, placeholderText):
        layout = QtWidgets.QHBoxLayout()
        label = QtWidgets.QLabel(label_text)
        label.setFixedWidth(80)
        field = QtWidgets.QLineEdit()
        field.setObjectName(object_name)
        field.setFixedWidth(width)
        field.setPlaceholderText(placeholderText)
        layout.addWidget(label)
        layout.addWidget(field)
        
        return layout, field


    def _separator(self):
        line = QtWidgets.QFrame()
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        line.setStyleSheet("margin-top: 5px; margin-bottom: 5px;")
        return line
        
        
    def _labeled_dropdown(self, label_text, options):
        layout = QtWidgets.QHBoxLayout()
        label = QtWidgets.QLabel(label_text)
        label.setFixedWidth(80)
        dropdown = QtWidgets.QComboBox()
        dropdown.addItems(options)
        dropdown.setFixedWidth(200)
        layout.addWidget(label)
        layout.addWidget(dropdown)
        layout.addStretch()
        return layout

    def _toggle_Field(self, fieldGrp, enabled):
        fieldGrp.setEnabled(enabled)
        if enabled:
            fieldGrp.setStyleSheet("")
        else:
            fieldGrp.setStyleSheet("background-color: #555555; color: #888888;")


    def _toggleRadio(self,radGrp, enabled):
        for rb in radGrp.buttons():
            rb.setEnabled(enabled)
            if enabled:
                rb.setStyleSheet("")
            else:
                rb.setStyleSheet("color: #555555;")  # dark grey color
        

    def updateFieldState(self, dropdown, field):
        if dropdown.currentText() == "Select an option":
            field.setEnabled(True)
            field.setStyleSheet("")
        else:
            field.setEnabled(False)
            field.setStyleSheet("color: grey; background-color: #555555;")

    def _textField_and_dropdown(self, label_text, field_width, field_name, dropdown_items, placeholderText):
        layout = QtWidgets.QHBoxLayout()
        label = QtWidgets.QLabel(label_text)
        label.setFixedWidth(80)
    
        field = QtWidgets.QLineEdit()
        field.setObjectName(field_name)
        field.setFixedWidth(field_width)
        field.setPlaceholderText(placeholderText)
        field.textChanged.connect(self.updatePreview)
    
        dropdown = QtWidgets.QComboBox()
        dropdown.addItem("Select an option")
        dropdown.addItems(dropdown_items)
        dropdown.setFixedWidth(117)
        
        addBtn = QtWidgets.QPushButton("Add")
        addBtn.setFixedWidth(60)
    
        layout.addWidget(label)
        layout.addWidget(field)
        layout.addWidget(dropdown)
        layout.addWidget(addBtn)
        layout.addStretch()
        return layout, field, dropdown, addBtn

    def updatePreview(self):
        self.previewField.setText(self.previewText)
        
        
    def searchReplace(self):
        searchName = self.baseField.text()
        replaceName = self.replaceTextField.text()
        selections = cmds.ls(selection=True)
        for selected in selections:
            print(selected)
            newName = selected.replace(searchName, replaceName)
            print(newName)
            #cmds.rename(selected, newName)
        
    def reset(self):
        self.sideCheck.setChecked(False)
        
        self.sideRadioGrp.buttons()[0].setChecked(True)
        self.startNumField.setValue(1)
        self.numPadField.setValue(2)
        self.endNumField.setValue(-1)
        self.endNumField.setValue(-1)
        
        self.sideSlider.setValue(2)
        self.paddingPosition.setValue(2)
        
        self.prefixField.clear()
        self.baseField.clear()
        self.suffixField.clear()
        
        self.prefixDropdown.setCurrentIndex(0)
        self.suffixDropdown.setCurrentIndex(0)
        
        self.replaceCheck.setChecked(False)
        self.replaceTextField.clear()
        
        
        self.numberCheck.setChecked(False)
        
        self.templateName = "prefix|baseName|suffix"
        templateParts = self.templateName.split("|")
        self.previewText =  "_".join(templateParts)
        self.previewField.setText(self.previewText)

        
    def mainNaming(self):
        prefixDrop = self.prefixDropdown.currentText()
        suffixDrop = self.suffixDropdown.currentText()
        prefix = self.prefixField.text() or (prefixDrop if prefixDrop != "Select an option" else "")
        base = self.baseField.text() or ""
        suffix = self.suffixField.text() or (suffixDrop if suffixDrop != "Select an option" else "")
        
        parts = [prefix, base, suffix]
        parts = [p for p in parts if p]
        
        self.templateName = "|".join(parts)
        self.sideUpdateRename()
        
    def sideUpdateRename(self):
        self.useSide = self.sideCheck.isChecked()
        self.useNumbering = self.numberCheck.isChecked()
        
        parts = self.templateName.split("|")
        inserts = []
        
        if self.useSide:
            sideValue = self.sideRadioGrp.checkedButton().text()
            sideIndex = max(0, min(len(parts), self.sideSlider.value()))
            inserts.append((sideIndex, sideValue))
            parts.insert(sideIndex, sideValue)
        else:
            for s in ["L", "R", "C"]:
                if s in parts:
                    parts.remove(s)
        
        if self.useNumbering:
            startNum = self.startNumField.value()
            num = str(startNum).zfill(self.numPadField.value())
            numberIndex = max(0, min(len(parts), self.paddingPosition.value()))
            if self.useSide and self.useNumbering and sideIndex >=0 and numberIndex == 0:
                    numberIndex = 1

            
            inserts.append((numberIndex, num))
            parts.insert(numberIndex, num)
        
        self.updatePreviewVariable(parts)


    def updatePreviewVariable(self, parts):
        self.previewText = "_".join(parts)
        self.previewField.setText(self.previewText)


    def rename(self):
        selections = cmds.ls(selection=True)
        fullName = cmds.ls(selection=True, long=True)
        length = len(selections) -1
        cmds.undoInfo(openChunk=True)
        for i, obj in enumerate(reversed(selections)):
            parts = self.templateName.split("|")
            parts = [p for p in parts if p]
            inserts = []
            
            
            if self.sideCheck.isChecked():
                side = self.sideRadioGrp.checkedButton().text()
                sidePos = self.sideSlider.value()
                sidePosClamped = max(0, min(len(parts), sidePos))
                inserts.append((sidePosClamped, side))
    
            if self.numberCheck.isChecked():
                num = str(self.startNumField.value() + length).zfill(self.numPadField.value())
                padPos = self.paddingPosition.value()
                padPosClamped = max(0, min(len(parts), padPos))
                
                if self.sideCheck.isChecked() and sidePosClamped >= 0 and padPosClamped == 0:
                    padPosClamped = 1
                    
                inserts.append((padPosClamped, num))
            for index, value in sorted(inserts, key=lambda x: x[0], reverse=True):
                parts.insert(index, value)
            
            new_name = "_".join(parts)
            
            if self.numberCheck.isChecked(): #safe rename
                cmds.rename(obj, new_name)
                length-=1
            elif length != 0:
                 cmds.rename(obj, new_name + str(length))
                 length-=1
            else:
                cmds.rename(obj, new_name)

                 
                 
            
        cmds.undoInfo(closeChunk=True)

    def removeEnd(self):
        selections = cmds.ls(selection=True)
        value = self.endNumField.value()
        for selected in selections:
            if value > 0:
                newName = selected[value:]  
            elif value < 0:
                newName = selected[:value]  
            else:
                newName = selected  
            cmds.rename(selected, newName)

    def autoSuffixes(self):
        suffixLib = {"joint": "JNT",
                    "mesh": "GEO",
                    "nurbsCurve": "CTRL",
                    "camera": "CAM",
                    "locator": "LOC",
                    "transform": "GRP"
                }
        
        selections = cmds.ls(selection=True)
        for selected in selections:
            shapes = cmds.listRelatives(selected, shapes=True, fullPath=True) or []
            if shapes:
                objType = cmds.objectType(shapes[0])
            else:
                objType = cmds.objectType(selected)
            type = suffixLib.get(objType)
            newName = selected + "_" + type
            cmds.rename(selected,  selected + "_" + type)
            
            
    def addName(self, pos):
        selection = cmds.ls(selection=True)
        
        if pos == "prefixes":
            addName = self.prefixField.text()
            optionName = self.prefixDropdown.currentText()
            for selected in selection:
                cmds.rename(selected, addName + optionName + "_" + selected)
        else:
            addName = self.suffixField.text()
            optionName = self.suffixDropdown.currentText()
            for selected in selection:
                cmds.rename(selected, selected + addName + "_" + optionName)
        return


def getWindow():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)
    
def show_rename_tool():
    global rename_tool_ui
    try:
        rename_tool_ui.close()
        rename_tool_ui.deleteLater()
    except:
        pass
    
    parent = getWindow()
    rename_tool_ui = RenameToolUI(parent)
    rename_tool_ui.show()
      
      
show_rename_tool()
