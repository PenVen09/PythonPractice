from PySide2 import QtWidgets, QtCore, QtGui
from shiboken2 import wrapInstance
import maya.OpenMayaUI as omui

class venJointTooling(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(venJointTooling, self).__init__(parent)
        self.setWindowTitle("Ven Joint Tooling")
        self.setFixedSize(400, 600)
        self.createUI()
        self.show()
        self.selJnt = []
        
    def createUI(self):
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        mainLayout = QtWidgets.QVBoxLayout(central_widget)


        tab_widget = QtWidgets.QTabWidget()
        mainLayout.addWidget(tab_widget)


        self.jntTab = QtWidgets.QWidget()
        tab_widget.addTab(self.jntTab, "Joints")

        basicLayout = QtWidgets.QVBoxLayout(self.jntTab)
        basicLayout.setAlignment(QtCore.Qt.AlignTop)

        label = QtWidgets.QLabel("Basic:")
        self.spwnJnt = QtWidgets.QPushButton("Spawn Joints")
        basicLayout.addWidget(label)
        basicLayout.addWidget(self.spwnJnt)

        basicLayout.addWidget(self._separator())

        label = QtWidgets.QLabel("Make Joint Planar:")
        basicLayout.addWidget(label)

        btnLayout = QtWidgets.QHBoxLayout()
        self.btn1 = QtWidgets.QPushButton("Step 1")
        self.btn2 = QtWidgets.QPushButton("Step 2")
        btnLayout.addWidget(self.btn1)
        btnLayout.addWidget(self.btn2)
        basicLayout.addLayout(btnLayout)

        basicLayout.addWidget(self._separator())

        label = QtWidgets.QLabel("Make Twist System:")
        basicLayout.addWidget(label)

        twstBtnLayout = QtWidgets.QHBoxLayout()
        self.twstBtn = QtWidgets.QPushButton("Twist Selected")
        twstBtnLayout.addWidget(self.twstBtn)
        basicLayout.addLayout(twstBtnLayout)

        self.btn1.clicked.connect(self.button1_action)
        self.btn2.clicked.connect(self.button2_action)


        self.controllerTab = QtWidgets.QWidget()
        tab_widget.addTab(self.controllerTab, "Controller")
        ctrlLayout = QtWidgets.QVBoxLayout(self.controllerTab)
        rowCtrlLayout = QtWidgets.QHBoxLayout()
        
        self.ctrlListWidget = QtWidgets.QListWidget()
        self.ctrlListWidget.setFixedHeight(200)
        self.ctrlListWidget.setFixedWidth(200)
        self.offsetBtn = QtWidgets.QPushButton("Offset")
        rowCtrlLayout.addWidget(self.ctrlListWidget,alignment=QtCore.Qt.AlignTop)
        rowCtrlLayout.addWidget(self.offsetBtn, alignment=QtCore.Qt.AlignTop)
        
        ctrlLayout.addLayout(rowCtrlLayout)

        
    def button1_action(self,*args):
        self.selJnt = cmds.ls(selection=True, type="joint")
        if len(self.selJnt) == 3:
            self.planarPlane = cmds.polyPlane(    
                        name="tmpPlanarPlane",
                        width=30,
                        height=30,
                        subdivisionsX=1,
                        subdivisionsY=1)[0]
            cmds.rotate(0, 0, '-90', self.planarPlane)
            cmds.makeIdentity(self.planarPlane)
                        
            self.planarLoc = cmds.spaceLocator(
                        name = "tmpPlanarLoc"
                        )[0]
            
            cmds.matchTransform(self.planarPlane, self.selJnt[0])
            pos = cmds.xform(self.selJnt[0], query=True, translation=True, worldSpace=True)
            cmds.xform(self.planarLoc, translation=pos, worldSpace=True)
            
            
            
            tmpAim= cmds.aimConstraint(self.selJnt[2], self.planarPlane,aim = (1,0,0), wu = (0,0, 1), wut="object",wuo=self.planarLoc, mo=False)
            cmds.delete(tmpAim)
            cmds.parent(self.planarLoc, self.planarPlane)
            cmds.rotate(0,0,0, self.planarLoc)
            cmds.move( 0, 30, 0, self.planarLoc, relative=True, worldSpace=False,objectSpace=True)
            
            for jnt in self.selJnt:
                cmds.parent(jnt, self.planarPlane)
                cmds.setAttr(f"{jnt}.translateY", 0)
                cmds.setAttr(f"{jnt}.translateY", lock=True)
                
        else:
            cmds.warning("Select only 3 joints")
    
    def button2_action(self,*args):
        for jnt in self.selJnt:
            cmds.setAttr(f"{jnt}.translateY", lock=False)
            cmds.setAttr(f"{jnt}.translateY", 0)
            cmds.parent(jnt, world=True)
    
        tmpAim1= cmds.aimConstraint(self.selJnt[1], self.selJnt[0],aim = (1,0,0), upVector = (0,0, 1), wut="object",wuo=self.planarLoc, mo=False)
        cmds.delete(tmpAim1)
        tmpAim2= cmds.aimConstraint(self.selJnt[2], self.selJnt[1],aim = (1,0,0), upVector = (0,0, 1), wu = (0,0, 1), wut="objectrotation", wuo=self.selJnt[0], mo=False)
        cmds.delete(tmpAim2)
    
        cmds.parent(self.selJnt[2], self.selJnt[1])
        cmds.parent(self.selJnt[1], self.selJnt[0])
        
        for jnt in self.selJnt: 
            cmds.makeIdentity(jnt, apply=True, r=True)
        cmds.delete(self.planarPlane)
        cmds.delete(self.planarLoc)
        
    def _separator(self):
        line = QtWidgets.QFrame()
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        line.setStyleSheet("margin-top: 5px; margin-bottom: 5px;")
        return line



def getWindow():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)
    
def show_jointTooling():
    global jointToolingUI
    try:
        jointToolingUI.close()
        jointToolingUI.deleteLater()
    except:
        pass
    
    parent = getWindow()
    jointToolingUI = venJointTooling(parent)
    jointToolingUI.show()
      
      
show_jointTooling()
