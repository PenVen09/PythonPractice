from PySide2 import QtWidgets, QtCore, QtGui
from shiboken2 import wrapInstance
import maya.OpenMayaUI as omui

class venJointTooling(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(venJointTooling, self).__init__(parent)
        self.controller_data = controller_data()
        self.setWindowTitle("Ven Joint Tooling")
        self.setFixedSize(400, 1000)
        self.selected_joint = []
        self.createUI()

        
    def createUI(self):
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QtWidgets.QVBoxLayout(central_widget)


        tab_widget = QtWidgets.QTabWidget()
        main_layout.addWidget(tab_widget)


        self.jnt_tab = QtWidgets.QWidget()
        tab_widget.addTab(self.jnt_tab, "Joints")

        basic_layout = QtWidgets.QVBoxLayout(self.jnt_tab)
        basic_layout.setAlignment(QtCore.Qt.AlignTop)

        label = QtWidgets.QLabel("Basic:")
        self.spawn_jnt = QtWidgets.QPushButton("Spawn Joints")
        basic_layout.addWidget(label)
        basic_layout.addWidget(self.spawn_jnt)

        basic_layout.addWidget(self._separator())

        label = QtWidgets.QLabel("Make Joint Planar:")
        basic_layout.addWidget(label)

        button_layout = QtWidgets.QHBoxLayout()
        self.planar_button_01 = QtWidgets.QPushButton("Step 1")
        self.planar_button_02 = QtWidgets.QPushButton("Step 2")
        button_layout.addWidget(self.planar_button_01)
        button_layout.addWidget(self.planar_button_02)
        basic_layout.addLayout(button_layout)

        basic_layout.addWidget(self._separator())

        label = QtWidgets.QLabel("Make Twist System:")
        basic_layout.addWidget(label)

        twist_button_layout = QtWidgets.QHBoxLayout()
        self.twist_button = QtWidgets.QPushButton("Twist Selected")
        twist_button_layout.addWidget(self.twist_button)
        basic_layout.addLayout(twist_button_layout)

        self.planar_button_01.clicked.connect(self.planar_on_pressed_01)
        self.planar_button_02.clicked.connect(self.planar_on_pressed_02)


        ##########################################
        controller_scroll_area = QtWidgets.QScrollArea()
        controller_scroll_area.setWidgetResizable(True)
        controller_scroll_area.setFrameShape(QtWidgets.QFrame.NoFrame)

        self.controller_scroll_content = QtWidgets.QWidget()
        
        controller_main_layout = QtWidgets.QVBoxLayout(self.controller_scroll_content)
        #controller_main_layout.setAlignment(QtCore.Qt.AlignTop)

        controller_scroll_area.setWidget(self.controller_scroll_content)
        main_layout.addWidget(controller_scroll_area)

        ########################
        controller_widget, controller_collapsible_button, controller_container = self._collapsible_button("Create Controller")
        
        
        thickness_layout = QtWidgets.QHBoxLayout()
        thickness_label = QtWidgets.QLabel("Thickness :")

        self.thickness_box = QtWidgets.QLineEdit()
        self.thickness_box .setText("1.0")
        self.thickness_box .setFixedWidth(40)
        thickness_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        thickness_slider.valueChanged.connect(lambda value: self._on_slider_change(value, self.thickness_box ))
        thickness_slider.setRange(0.0*100, 0.5*100)
        thickness_slider.setValue(10.0)
        thickness_button = QtWidgets.QPushButton("Apply")
        
        thickness_layout.addWidget(thickness_label)
        thickness_layout.addWidget(self.thickness_box )
        thickness_layout.addWidget(thickness_slider)
        thickness_layout.addWidget(thickness_button)
        
        
        row_controller_layout = QtWidgets.QHBoxLayout()
        
        self.ctrlListWidget = QtWidgets.QListWidget()
        self.ctrlListWidget.setFixedSize(200, 170)
        
        
        lib = controller_data()
        list = lib.get_controller_list()
        for ctrl in list:
            self.ctrlListWidget.addItem(ctrl)
        
        row_controller_layout.addWidget(self.ctrlListWidget, alignment=QtCore.Qt.AlignTop)
        
        buttons_widget = QtWidgets.QWidget()
        buttons_layout = QtWidgets.QVBoxLayout(buttons_widget)
        
        add_offset = QtWidgets.QCheckBox("Add Offset group")
        self.offset_button = QtWidgets.QPushButton("Offset")
        self.parent_button = QtWidgets.QPushButton("Parent")
        self.child_button = QtWidgets.QPushButton("Child")
        self.world_button = QtWidgets.QPushButton("World")
        
        self.offset_button.clicked.connect(self.test)
        
        buttons_layout.addWidget(add_offset)
        buttons_layout.addWidget(self.offset_button)
        buttons_layout.addWidget(self.parent_button)
        buttons_layout.addWidget(self.child_button)
        buttons_layout.addWidget(self.world_button)
        
        

        row_controller_layout.addWidget(buttons_widget, alignment=QtCore.Qt.AlignTop)
        controller_container.addLayout(thickness_layout)
        controller_container.addLayout(row_controller_layout)
        
        controller_main_layout.addWidget(controller_widget)
        
        
        
        ########################
        color_widget, color_collapsible_button, color_layout = self._collapsible_button("Controller Color")
        
        swatch_grid = QtWidgets.QGridLayout()
        swatch_grid.setSpacing(0)
        swatch_grid.setContentsMargins(0, 0, 0, 0)
        color_widget.setStyleSheet("background-color: #2A2A2A;")
        
        color_index = 0
        for row in range(4):
            for column in range(8):
                btn = QtWidgets.QPushButton()
                button_colour = colorList().get_color_by_index(color_index)
                btn.setStyleSheet(f"background-color: rgb{button_colour};")
                swatch_grid.addWidget(btn, row, column)
                
                btn.clicked.connect(lambda *args,idx=color_index: self.controller_color(idx))
                
                color_index += 1
                
                
        color_reset_btn = QtWidgets.QPushButton("Reset Color")
        color_reset_btn.clicked.connect(self.reset_color)
        color_reset_btn.setStyleSheet("background-color: gray;")
        color_layout.addLayout(swatch_grid)
        color_layout.addWidget(color_reset_btn)
        controller_main_layout.addWidget(color_widget)
        
        ############
        replace_shape_widget, replace_collapsible_button, replace_container = self._collapsible_button("Replace Shapes")
        
        to_replace_layout = QtWidgets.QHBoxLayout()
        to_replace_box = QtWidgets.QLineEdit()
        to_replace_box.setFixedWidth(200)
        to_replace_button = QtWidgets.QPushButton("Register Shape")
        to_replace_box.setReadOnly(True)
        
        
        to_replace_layout.addWidget(to_replace_box)
        to_replace_layout.addWidget(to_replace_button)
        
        shape_reference_layout = QtWidgets.QHBoxLayout()
        shape_reference_box = QtWidgets.QLineEdit()
        shape_reference_box.setReadOnly(True)
        shape_reference_box.setFixedWidth(200)
        shape_reference_button = QtWidgets.QPushButton("Reference Shape")
        
        shape_reference_layout.addWidget(shape_reference_box)
        shape_reference_layout.addWidget(shape_reference_button)
        
        replace_layout = QtWidgets.QHBoxLayout()
        mirror_checkbox = QtWidgets.QCheckBox("Mirror Shapes")
        replace_button = QtWidgets.QPushButton("Replace Shapes")
        replace_button.setFixedWidth(200)
        replace_layout.addWidget(mirror_checkbox)
        replace_layout.addWidget(replace_button)
        
        
        replace_container.addLayout(to_replace_layout)
        replace_container.addLayout(shape_reference_layout)
        replace_container.addLayout(replace_layout)
        
        
        
        controller_main_layout.addWidget(replace_shape_widget)
        
        
        
        #############
        add_attribute_widget, attribute_collapsible_button, attribute_container = self._collapsible_button("Add Attributes")

        
        controller_main_layout.addWidget(add_attribute_widget)
        
        #######
        lock_widget, lock_collapsible_button, lock_container = self._collapsible_button("Lock/Unlock Attributes")
        lock_hide_layout = QtWidgets.QHBoxLayout()
        lock_hide_label = QtWidgets.QLabel("Operations:")
        lock_checkboxes = QtWidgets.QCheckBox("Lock")
        hide_checkboxes = QtWidgets.QCheckBox("Hide")
        execute_lock_button = QtWidgets.QPushButton("Execute")
        
        
        lock_hide_layout.addWidget(lock_hide_label)
        lock_hide_layout.addWidget(lock_checkboxes)
        lock_hide_layout.addWidget(hide_checkboxes)
        lock_hide_layout.addWidget(execute_lock_button)
        lock_container.addLayout(lock_hide_layout)
        lock_container.addWidget(self._separator())
        
        
        for attribute in ["Translate", "Rotate", "Scale"]:
            transform_layout = self._create_colored_checkboxes(attribute)
            lock_container.addLayout(transform_layout)
                        
        
        visibility_layout = QtWidgets.QHBoxLayout()
        visibility_checkboxes = QtWidgets.QCheckBox("Visibility")
        
        lock_container.addLayout(visibility_layout)
    
        visibility_layout.addWidget(visibility_checkboxes)
        lock_container.addWidget(self._separator())
        
        
        lock_utilities_layout = QtWidgets.QHBoxLayout()
        lock_button = QtWidgets.QPushButton("Lock")
        unlock_button = QtWidgets.QPushButton("Unlock")
        hide_button = QtWidgets.QPushButton("Hide")
        
        shift_layout = QtWidgets.QHBoxLayout()
        shift_up_attribute = QtWidgets.QPushButton("Shift Up")
        shift_down_attribute = QtWidgets.QPushButton("Shift Down")
        
        shift_layout.addWidget(shift_up_attribute)
        shift_layout.addWidget(shift_down_attribute)
        
        
        lock_utilities_layout.addWidget(lock_button)
        lock_utilities_layout.addWidget(unlock_button)
        lock_utilities_layout.addWidget(hide_button)
        lock_container.addLayout(lock_utilities_layout)
        lock_container.addLayout(shift_layout)
        
        controller_main_layout.addWidget(lock_widget)
        ###########
        
        connect_attribute_widget, connect_collapsible_button, connect_container = self._collapsible_button("Connect Attributes")
        
        row_object_layout = QtWidgets.QHBoxLayout()
        source_object =  QtWidgets.QLineEdit()
        label_object = QtWidgets.QLabel(">")
        target_object = QtWidgets.QLineEdit()
        
        row_object_layout.addWidget(source_object)
        row_object_layout.addWidget(label_object)
        row_object_layout.addWidget(target_object)
        connect_container.addLayout(row_object_layout)
        
        row_connect_layout = QtWidgets.QHBoxLayout()
        
        source_connect_list = QtWidgets.QListWidget()
        source_connect_list .setFixedSize(170, 200)
        target_connect_list = QtWidgets.QListWidget()
        target_connect_list .setFixedSize(170, 200)
        
        row_connect_layout.addWidget(source_connect_list,alignment=QtCore.Qt.AlignTop)
        row_connect_layout.addWidget(target_connect_list,alignment=QtCore.Qt.AlignTop)
        connect_container.addLayout(row_connect_layout)
        controller_main_layout.addWidget(connect_attribute_widget)
        ####
        
        
        
        #controller_collapsible_button.click()
        #color_collapsible_button.click()
        #attribute_collapsible_button.click()
        #replace_collapsible_button.click()
        #lock_collapsible_button.click()
        
        tab_widget.addTab(controller_scroll_area, "Controller")
        tab_widget.setCurrentIndex(1)
        

    def _create_colored_checkboxes(self, attribute):
        transform_layout = QtWidgets.QHBoxLayout()
        transform_layout.setContentsMargins(0, 0, 0, 0) 
        lock_checkboxes = QtWidgets.QCheckBox(attribute)
        transform_layout.addWidget(lock_checkboxes)
        
        
        axis_checkboxes = []
        for axis, color in zip(["X", "Y", "Z"], ["red", "green", "blue"]):
            axis_checkbox = QtWidgets.QCheckBox(axis)
            axis_checkboxes.append(axis_checkbox)
        
            icon_label = QtWidgets.QLabel()
            icon_label.setFixedSize(5, 12)
            icon_label.setStyleSheet(f"background-color: {color};")
        
            axis_layout = QtWidgets.QHBoxLayout()
            axis_layout.setSpacing(2)
            axis_layout.setContentsMargins(0, 0, 0, 0)
            axis_layout.addWidget(icon_label)
            axis_layout.addWidget(axis_checkbox)
        
            axis_widget = QtWidgets.QWidget()
            axis_widget.setLayout(axis_layout)
            transform_layout.addWidget(axis_widget)
            
        lock_checkboxes.stateChanged.connect(lambda state, boxes=axis_checkboxes: self._toggle_axis_checkboxes(state, boxes))

        
        return transform_layout


    def _on_slider_change(self, value, field):
        new_value = value*0.1
        field.setText(f"{new_value:.2f}")

    def _collapsible_button(self, label_text):
        section_widget = QtWidgets.QWidget()
        section_layout = QtWidgets.QVBoxLayout(section_widget)
        section_layout.setContentsMargins(0, 0, 0, 0)
    
        toggle_button = QtWidgets.QToolButton(checkable=True, checked=False)
        toggle_button.setText(label_text)
        toggle_button.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        toggle_button.setArrowType(QtCore.Qt.DownArrow)
        toggle_button.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
    
        toggle_button.setStyleSheet("""
            QToolButton {
                background-color:  #666666;   
                border: none;              
                padding: 4px;              
                border-radius: 4px;          
                color: white;               
            }
        """)
    
        content_widget = QtWidgets.QWidget()
        content_layout = QtWidgets.QVBoxLayout(content_widget)
        content_layout.setContentsMargins(5, 0, 5, 5)
        content_widget.setVisible(True)
    
    
        section_layout.addWidget(toggle_button)
        section_layout.addWidget(content_widget)
        toggle_button.clicked.connect(lambda: self._collapsible_on_pressed(toggle_button, content_widget))
        #toggle_button.click()
        return section_widget, toggle_button, content_layout

    def _collapsible_on_pressed(self, buttons, collapse_frame):
        checked = buttons.isChecked()
        buttons.setArrowType(QtCore.Qt.DownArrow if not checked else QtCore.Qt.RightArrow)
        collapse_frame.setVisible(not checked)
        return
        
        
    def _separator(self):
        line = QtWidgets.QFrame()
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        line.setStyleSheet("margin-top: 5px; margin-bottom: 5px;")
        return line
    
    
    def _toggle_axis_checkboxes(self, state, boxes):
        checked = state == QtCore.Qt.Checked
        for checkbox in boxes:
            checkbox.setChecked(checked)
            checkbox.setEnabled(not checked)

    def planar_on_pressed_01(self,*args):
        self.selected_joint = cmds.ls(selection=True, type="joint")
        if len(self.selected_joint) == 3:
            self.planarPlane = cmds.polyPlane(    
                        name="tmpPlanarPlane",
                        width=30,
                        height=30,
                        subdivisionsX=1,
                        subdivisionsY=1)[0]
            cmds.rotate(0, 0, '-90', self.planarPlane)
            cmds.makeIdentity(self.planarPlane)
                        
            self.planarLoc = cmds.spaceLocator(
                        name = "tmpPlanarLoc"
                        )[0]
            
            cmds.matchTransform(self.planarPlane, self.selected_joint[0])
            pos = cmds.xform(self.selected_joint[0], query=True, translation=True, worldSpace=True)
            cmds.xform(self.planarLoc, translation=pos, worldSpace=True)
            
            
            
            tmp_aim= cmds.aimConstraint(self.selected_joint[2], self.planarPlane,aim = (1,0,0), wu = (0,0, 1), wut="object",wuo=self.planarLoc, mo=False)
            cmds.delete(tmp_aim)
            cmds.parent(self.planarLoc, self.planarPlane)
            cmds.rotate(0,0,0, self.planarLoc)
            cmds.move( 0, 30, 0, self.planarLoc, relative=True, worldSpace=False,objectSpace=True)
            
            for jnt in self.selected_joint:
                cmds.parent(jnt, self.planarPlane)
                cmds.setAttr(f"{jnt}.translateY", 0)
                cmds.setAttr(f"{jnt}.translateY", lock=True)
                
        else:
            cmds.warning("Select only 3 joints")
    
    def planar_on_pressed_02(self,*args):
        for jnt in self.selected_joint:
            cmds.setAttr(f"{jnt}.translateY", lock=False)
            cmds.setAttr(f"{jnt}.translateY", 0)
            cmds.parent(jnt, world=True)
    
        tmp_aim1= cmds.aimConstraint(self.selected_joint[1], self.selected_joint[0],aim = (1,0,0), upVector = (0,0, 1), wut="object",wuo=self.planarLoc, mo=False)
        cmds.delete(tmp_aim1)
        tmp_aim2= cmds.aimConstraint(self.selected_joint[2], self.selected_joint[1],aim = (1,0,0), upVector = (0,0, 1), wu = (0,0, 1), wut="objectrotation", wuo=self.selected_joint[0], mo=False)
        cmds.delete(tmp_aim2)
    
        cmds.parent(self.selected_joint[2], self.selected_joint[1])
        cmds.parent(self.selected_joint[1], self.selected_joint[0])
        
        for jnt in self.selected_joint: 
            cmds.makeIdentity(jnt, apply=True, r=True)
        cmds.delete(self.planarPlane)
        cmds.delete(self.planarLoc)
        
    def test(self):
        crv = cmds.curve(d=1, p=self.controller_data.cvTuples['Circle'])
        return
            
        
    def controller_color(self, color_index):
        selection = cmds.ls(selection=True, long=True)
        shapes = cmds.listRelatives(selection, shapes=True, fullPath=True) or []
        for shape in shapes:
            cmds.setAttr(f"{shape}.overrideEnabled", 1)
            cmds.setAttr(f"{shape}.overrideColor", color_index)
    
    def reset_color(self):
        selection = cmds.ls(selection=True, long=True)
        shapes = cmds.listRelatives(selection, shapes=True, fullPath=True) or []
        for shape in shapes:
            cmds.setAttr(f"{shape}.overrideEnabled", 0)
            cmds.setAttr(f"{shape}.overrideColor", 0)
            
            



class colorList():
    def get_color_by_index(self, index):
        maya_colors = [
            (140, 140, 140),        # 0
            (0, 0, 0),         # 1
            (63, 63, 63),      # 2
            (127, 127, 127),   # 3
            (155, 0, 40),      # 4
            (0, 0, 255),       # 5
            (0, 4, 95),       # 6
            (0, 70, 24),       # 6
            (37, 0, 67),       # 7
            (199, 0, 199),     # 8
            (137, 71, 51),     # 9
            (62, 34, 31),      # 10
            (153, 36, 0),      # 11
            (255, 0, 0),       # 12
            (0, 255, 0),       # 13
            (0, 65, 153),      # 14
            (255, 255, 255),   # 15
            (255, 255, 0),     # 16
            (99, 220, 255),    # 17
            (67, 255, 162),    # 18
            (255, 175, 175),   # 19
            (227, 172, 121),   # 20
            (255, 255, 98),    # 21
            (0, 153, 83),      # 22
            (160, 105, 48),    # 23
            (158, 160, 48),    # 24
            (104, 160, 48),    # 25
            (48, 160, 93),     # 26
            (48, 160, 160),    # 27
            (48, 103, 160),    # 28
            (111, 48, 160),    # 29
            (160, 48, 111),    # 30
        ]
        return maya_colors[index]
        

class controller_data():
    def __init__(self):
        self.cvTuples = {
        'Group':[],
        '---------------':[],
        'Gear':[],
        'Circle': [(0.0, 0.0, 1.0),(0.707, 0.0, 0.707),(1.0, 0.0, 0.0),(0.707, 0.0, -0.707),(0.0, 0.0, -1.0),(-0.707, 0.0, -0.707),(-1.0, 0.0, 0.0),(-0.707, 0.0, 0.707),(0.0, 0.0, 1.0)],
        'Square':[],
        'Box': [],
        'Triangle':[],
        'Pyramid':[],
        'Diamond':[],
        'Circle Pin':[],
        'Square Pin':[],
        'Sphere Pin':[],
        'Locator':[],
        'Two Arrows':[],
        'Four Arrows':[],
        'Pivot Points':[],
        
        }
        
    def get_controller_list(self):
        control_list = []
        for name in self.cvTuples.keys():
            control_list.append(name)
        return control_list
    




def getWindow():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)
    
def show_jointTooling():
    global jointToolingUI
    try:
        jointToolingUI.close()
        jointToolingUI.deleteLater()
    except:
        pass
        
    parent = getWindow()
    jointToolingUI = venJointTooling(parent)
    jointToolingUI.show()
      
      
show_jointTooling()
